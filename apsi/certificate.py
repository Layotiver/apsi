import myutils

p1 = 62344232249126398711971847129537242490461833645897905550599666878208472518141
q1 = 69424815937183049601542568362901696246495629071791872542741806052281862614269
n1 = 4328236848640591846497999293204589862716945565888978129460830415472113271195442568964628200884085986388732361852540794421691114582987043680480463787953929
e1 = 4262248169
d1 = 2151438266011566183723158872347424934965094290688115224015727556452230854862178301949306293136175583916665794665761853075337430590787440134725037120687849

n2 = 11276099792544615335474267978320347122491668738105209654508057091536149776995561950721678078303251254520853321114489335466491055018545188183197038616790609
N = n1 * n2


class CertificateAuthority:
    def __init__(self) -> None:
        pass

    def sign(self, hcRe1, hcRe2, hcRe1e2):
        hcRe1_d1 = []
        hcRe2_d1 = []
        hcRe1e2_d1 = []
        for i, j, k in zip(hcRe1, hcRe2, hcRe1e2):
            hcRe1_d1.append(myutils.encrypt(i, d1, N))
            hcRe2_d1.append(myutils.encrypt(j, d1, N))
            hcRe1e2_d1.append(myutils.encrypt(k, d1, N))
        return hcRe1_d1, hcRe2_d1, hcRe1e2_d1
